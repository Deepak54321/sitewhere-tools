/*
 * Copyright (c) SiteWhere LLC. All rights reserved. http://www.sitewhere.com
 *
 * The software in this package is published under the terms of the MIT
 * license, a copy of which has been included with this distribution in the
 * LICENSE.txt file.
 */
package com.example;

import java.util.logging.Logger;

import com.sitewhere.agent.BaseCommandProcessor;
import com.sitewhere.agent.ISiteWhereEventDispatcher;
import com.sitewhere.agent.SiteWhereAgentException;
import com.sitewhere.device.communication.protobuf.proto.Sitewhere.Device.Header;
import com.sitewhere.device.communication.protobuf.proto.Sitewhere.Device.RegistrationAck;
import com.sitewhere.device.communication.protobuf.proto.Sitewhere.SiteWhere.RegisterDevice;
import com.sitewhere.spi.device.event.IDeviceEventOriginator;

/**
 * Example of command processing from a protobuf descriptor generated by SiteWhere.
 * 
 * @author Derek
 */
public class ExampleCommandProcessor extends BaseCommandProcessor {

	/** Static logger instance */
	private static Logger LOGGER = Logger.getLogger(ExampleCommandProcessor.class.getName());

	/** Hardware id */
	private String hardwareId;

	/** Specification token */
	private String specificationToken;

	/*
	 * (non-Javadoc)
	 * 
	 * @see com.sitewhere.agent.BaseCommandProcessor#executeStartupLogic(java.lang.String,
	 * java.lang.String, com.sitewhere.agent.ISiteWhereEventDispatcher)
	 */
	@Override
	public void executeStartupLogic(String hardwareId, String specificationToken,
			ISiteWhereEventDispatcher dispatcher) throws SiteWhereAgentException {
		this.hardwareId = hardwareId;
		this.specificationToken = specificationToken;

		RegisterDevice.Builder builder = RegisterDevice.newBuilder();
		RegisterDevice register =
				builder.setHardwareId(hardwareId).setSpecificationToken(specificationToken).build();
		dispatcher.registerDevice(register, null);
		LOGGER.info("Sent registration information.");
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * com.sitewhere.agent.BaseCommandProcessor#handleRegistrationAck(com.sitewhere.device
	 * .communication.protobuf.proto.Sitewhere.Device.Header,
	 * com.sitewhere.device.communication.protobuf.proto.Sitewhere.Device.RegistrationAck)
	 */
	@Override
	public void handleRegistrationAck(Header header, RegistrationAck ack) {
		switch (ack.getState()) {
		case NEW_REGISTRATION: {
			LOGGER.info("SiteWhere indicated device was successfully registered.");
			break;
		}
		case ALREADY_REGISTERED: {
			LOGGER.info("SiteWhere indicated device is using an existing registration.");
			break;
		}
		case REGISTRATION_ERROR: {
			LOGGER.warning("SiteWhere indicated a device registration error.");
			break;
		}
		}
	}

	/**
	 * Handler for 'helloWorld(String, boolean)' command.
	 * 
	 * @param greeting
	 * @param loud
	 * @param originator
	 * @throws SiteWhereAgentException
	 */
	public void helloWorld(String greeting, Boolean loud, IDeviceEventOriginator originator)
			throws SiteWhereAgentException {
		String response = greeting + " World!";
		if (loud) {
			response = response.toUpperCase();
		}
		sendAck(hardwareId, response, originator);
		LOGGER.info("Sent reponse to 'helloWorld' command.");
	}

	/**
	 * Handler for 'ping()' command.
	 * 
	 * @param originator
	 * @throws SiteWhereAgentException
	 */
	public void ping(IDeviceEventOriginator originator) throws SiteWhereAgentException {
		sendAck(hardwareId, "Acknowledged.", originator);
		LOGGER.info("Sent reponse to 'ping' command.");
	}

	/**
	 * Handler for 'testEvents()' command.
	 * 
	 * @param originator
	 * @throws SiteWhereAgentException
	 */
	public void testEvents(IDeviceEventOriginator originator) throws SiteWhereAgentException {
		sendMeasurement(hardwareId, "engine.temp", 170.0, originator);
		sendLocation(hardwareId, 33.7550, -84.3900, 0.0, originator);
		sendAlert(hardwareId, "engine.overheat", "Engine is overheating!", originator);
		LOGGER.info("Sent reponse to 'testEvents' command.");
	}

	public String getHardwareId() {
		return hardwareId;
	}

	public void setHardwareId(String hardwareId) {
		this.hardwareId = hardwareId;
	}

	public String getSpecificationToken() {
		return specificationToken;
	}

	public void setSpecificationToken(String specificationToken) {
		this.specificationToken = specificationToken;
	}
}